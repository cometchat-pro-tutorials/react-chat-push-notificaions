{"ast":null,"code":"var _jsxFileName = \"/Users/booker/Code/why-no-werk/src/components/Chat.js\";\nimport React from 'react';\nimport { CometChat } from '@cometchat-pro/chat';\nimport MDSpinner from 'react-md-spinner';\nimport emptyChatImage from \"../assets/empty-state.svg\";\nimport logoImage from \"../assets/logo.svg\";\nconst REACT_APP_COMETCHAT_GUID = process.env.REACT_APP_COMETCHAT_GUID;\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super();\n\n    this.handleSendMessage = event => {\n      event.preventDefault();\n      this.setState({\n        isSending: true\n      });\n      const message = this.state.message;\n      let textMessage = new CometChat.TextMessage(REACT_APP_COMETCHAT_GUID, message, CometChat.MESSAGE_TYPE.TEXT, CometChat.RECEIVER_TYPE.GROUP);\n      CometChat.sendMessage(textMessage).then(message => {\n        const chat = this.state.chat;\n        chat.push(message);\n        this.setState({\n          chat\n        });\n        console.log('Message sent successfully:', message);\n      }, error => {\n        console.log('Message sending failed with error:', error);\n      });\n      this.setState({\n        message: '',\n        isSending: false\n      });\n    };\n\n    this.scrollToBottom = () => {\n      const chat = document.getElementById(\"endofchat\");\n      chat.scrollIntoView();\n    };\n\n    this.state = {\n      message: '',\n      chat: [],\n      isLoading: true,\n      user: props.location.state ? props.location.state.user : '',\n      isSending: false\n    };\n  }\n\n  componentWillMount() {\n    if (!this.props.location.state) {\n      this.props.history.push('/login');\n    }\n  }\n\n  componentDidMount() {\n    let messagesRequest = new CometChat.MessagesRequestBuilder().setGUID(REACT_APP_COMETCHAT_GUID).setLimit(100).build();\n    messagesRequest.fetchPrevious().then(messages => {\n      this.setState({\n        chat: messages,\n        isLoading: false\n      });\n    }, error => {\n      console.log('Message fetching failed with error:', error);\n    });\n    CometChat.addMessageListener('MESSAGE_LISTENER_KEY', new CometChat.MessageListener({\n      onTextMessageReceived: message => {\n        let chat = this.state.chat;\n        console.log('Incoming Message Log', {\n          message\n        });\n        chat.push(message);\n        this.setState({\n          chat\n        });\n      }\n    }));\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  componentWillUnmount() {\n    console.log('removing listener');\n    CometChat.removeMessageListener('MESSAGE_LISTENER_KEY');\n  }\n\n  render() {\n    let _this$state = this.state,\n        chat = _this$state.chat,\n        message = _this$state.message,\n        isLoading = _this$state.isLoading,\n        isSending = _this$state.isSending,\n        user = _this$state.user;\n    let chatContent = React.createElement(\"div\", {\n      className: \"loading-messages-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(MDSpinner, {\n      size: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"loading-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Loading Messages\"));\n    let sendButton = isSending ? React.createElement(\"div\", {\n      className: \"message-send-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(MDSpinner, {\n      size: \"30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"message-send-icon\",\n      onClick: this.handleSendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-paper-plane fa-2x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n\n    if (!isLoading && !chat.length) {\n      chatContent = React.createElement(\"div\", {\n        className: \"text-center img-fluid empty-chat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"empty-chat-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: emptyChatImage,\n        className: \"img-res\",\n        alt: \"empty chat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \" No new message? \"), React.createElement(\"h6\", {\n        className: \"empty-chat-sub-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Send your first message below.\")));\n    } else if (!isLoading && chat.length) {\n      chatContent = chat.map(chat => {\n        let isUser = user.uid === chat.sender.uid;\n        let renderName;\n\n        if (isUser) {\n          renderName = null;\n        } else {\n          renderName = React.createElement(\"div\", {\n            className: \"sender-name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }, chat.sender.name);\n        }\n\n        return React.createElement(\"div\", {\n          key: chat.id,\n          className: \"chat-bubble-row\",\n          style: {\n            flexDirection: isUser ? 'row-reverse' : 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: chat.sender.avatar,\n          alt: \"sender avatar\",\n          className: \"avatar\",\n          style: isUser ? {\n            marginLeft: '30px'\n          } : {\n            marginRight: '30px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"chat-bubble \".concat(isUser ? 'is-user' : 'is-other'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, renderName, React.createElement(\"div\", {\n          className: \"message\",\n          style: {\n            color: isUser ? '#FFF' : '#2D313F'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, chat.text)));\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"chat-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"nav-left-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"logo\",\n      src: logoImage,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Chat\")), React.createElement(\"div\", {\n      className: \"nav-right-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"welcome-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Welcome \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, user.name), \" \"), \" \", React.createElement(\"img\", {\n      src: user.avatar,\n      className: \"avatar\",\n      alt: \"user avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chat-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"#General\"))), React.createElement(\"div\", {\n      className: \"chat-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"msg-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, chatContent, React.createElement(\"div\", {\n      id: \"endofchat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"msg-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"message-form\",\n      onSubmit: this.handleSendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control message-input\",\n      placeholder: \"Type something\",\n      value: message,\n      onChange: event => this.setState({\n        message: event.target.value\n      }),\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), sendButton)))))));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/booker/Code/why-no-werk/src/components/Chat.js"],"names":["React","CometChat","MDSpinner","REACT_APP_COMETCHAT_GUID","process","env","Chat","Component","constructor","props","handleSendMessage","event","preventDefault","setState","isSending","message","state","textMessage","TextMessage","MESSAGE_TYPE","TEXT","RECEIVER_TYPE","GROUP","sendMessage","then","chat","push","console","log","error","scrollToBottom","document","getElementById","scrollIntoView","isLoading","user","location","componentWillMount","history","componentDidMount","messagesRequest","MessagesRequestBuilder","setGUID","setLimit","build","fetchPrevious","messages","addMessageListener","MessageListener","onTextMessageReceived","componentDidUpdate","componentWillUnmount","removeMessageListener","render","chatContent","sendButton","length","emptyChatImage","map","isUser","uid","sender","renderName","name","id","flexDirection","avatar","marginLeft","marginRight","color","text","logoImage","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {CometChat} from '@cometchat-pro/chat';\nimport MDSpinner from 'react-md-spinner';\n\nimport emptyChatImage from '../assets/empty-state.svg';\nimport logoImage from '../assets/logo.svg';\n\nconst {REACT_APP_COMETCHAT_GUID} = process.env;\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      message: '',\n      chat: [],\n      isLoading: true,\n      user: props.location.state? props.location.state.user : '',\n      isSending: false,\n    };\n  }\n\n  componentWillMount(){\n    if(!this.props.location.state){\n      this.props.history.push('/login');\n    }\n  }\n\n  componentDidMount() {\n    let messagesRequest = new CometChat.MessagesRequestBuilder()\n      .setGUID(REACT_APP_COMETCHAT_GUID)\n      .setLimit(100)\n      .build();\n\n    messagesRequest.fetchPrevious().then(\n      messages => {\n        this.setState({\n          chat: messages,\n          isLoading: false,\n        });\n      },\n      error => {\n        console.log('Message fetching failed with error:', error);\n      }\n    );\n\n    CometChat.addMessageListener(\n      'MESSAGE_LISTENER_KEY',\n      new CometChat.MessageListener({\n        onTextMessageReceived: message => {\n          let {chat} = this.state;\n          console.log('Incoming Message Log', {message});\n          chat.push(message);\n          this.setState({\n            chat\n          });\n        },\n      })\n    );\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  componentWillUnmount() {\n    console.log('removing listener')\n    CometChat.removeMessageListener('MESSAGE_LISTENER_KEY');\n  }\n\n  handleSendMessage = event => {\n    event.preventDefault();\n    this.setState({\n      isSending: true\n    });\n    const {message} = this.state;\n\n    let textMessage = new CometChat.TextMessage(\n      REACT_APP_COMETCHAT_GUID,\n      message,\n      CometChat.MESSAGE_TYPE.TEXT,\n      CometChat.RECEIVER_TYPE.GROUP\n    );\n\n    CometChat.sendMessage(textMessage).then(\n      message => {\n        const { chat } = this.state;\n        chat.push(message);\n        this.setState({\n          chat\n        })\n        console.log('Message sent successfully:', message);\n      },\n      error => {\n        console.log('Message sending failed with error:', error);\n      }\n    );\n    this.setState({\n      message: '',\n      isSending: false,\n    });\n  };\n\n  scrollToBottom = () => {\n    const chat = document.getElementById(\"endofchat\");\n    chat.scrollIntoView();\n  }\n\n  render() {\n    let {chat, message, isLoading, isSending, user} = this.state;\n    let chatContent = (\n      <div className='loading-messages-container'>\n        <MDSpinner size='100' />\n        <span className='loading-text'>Loading Messages</span>\n      </div>\n    );\n    let sendButton = isSending? <div className=\"message-send-spinner\"><MDSpinner size='30'/></div>: <div className=\"message-send-icon\" onClick={this.handleSendMessage}><i className=\"fa fa-paper-plane fa-2x\"></i></div>;\n\n    if (!isLoading && !chat.length) {\n      chatContent = (\n        <div className='text-center img-fluid empty-chat'>\n          <div className='empty-chat-holder'>\n            <img src={emptyChatImage} className='img-res' alt='empty chat' />\n          </div>\n\n          <div>\n            <h2> No new message? </h2>\n            <h6 className='empty-chat-sub-title'>\n              Send your first message below.\n            </h6>\n          </div>\n        </div>\n      );\n    } \n    else if (!isLoading && chat.length) {\n      chatContent = chat.map(chat => {\n        let isUser = user.uid === chat.sender.uid;\n        let renderName;\n        if (isUser) {\n          renderName = null;\n        } else {\n          renderName = (\n            <div className='sender-name'>{chat.sender.name}</div>\n          );\n        }\n        return (\n          <div key={chat.id} className='chat-bubble-row' style={{flexDirection: isUser ? 'row-reverse' : 'row'}}>\n              <img src={chat.sender.avatar} alt='sender avatar' className='avatar' style={isUser ? {marginLeft: '30px'} : {marginRight: '30px'}} />\n              <div className={`chat-bubble ${isUser? 'is-user':'is-other'}`}>\n                {renderName}\n                <div className='message' style={{color: isUser ? '#FFF' : '#2D313F'}}>\n                  {chat.text}\n                </div>\n              </div>\n          </div>\n        )\n      });\n    }\n\n    return (\n      <div className='chat-container'>\n        <nav>\n            <div className=\"nav-left-section\">\n                <img className=\"logo\" src={logoImage} alt=\"logo\" />\n                <span className=\"title\">Chat</span>\n            </div>\n            <div className=\"nav-right-section\">\n                <span className=\"welcome-message\">Welcome <b>{ user.name }</b> </span> <img src={user.avatar} className=\"avatar\" alt=\"user avatar\" />\n            </div>\n        </nav>\n        <div className='chat'>\n          <div className='container'>\n            <div className='chat-header'>\n              <div className='active'>\n                <h5>#General</h5>\n              </div>\n            </div>\n\n            <div className='chat-page'>\n                  <div className='msg-page'>\n                    {chatContent}\n                    <div id='endofchat'></div>\n                  </div>\n                  <div className='msg-footer'>\n                    <form\n                      className='message-form'\n                      onSubmit={this.handleSendMessage}>\n                      <div className='input-group'>\n                        <input\n                          type='text'\n                          className='form-control message-input'\n                          placeholder='Type something'\n                          value={message}\n                          onChange={ event => this.setState({ message: event.target.value }) }\n                          required\n                        />\n                        {sendButton}\n                      </div>\n                    </form>\n                  </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}